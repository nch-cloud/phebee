{
    "Comment": "Process phenopackets from zip file",
    "StartAt": "ParseZipFile",
    "States": {
        "ParseZipFile": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${ParsePhenopacketCollectionFunctionArn}",
                "Payload": {
                    "project_id.$": "$.project_id",
                    "s3_path.$": "$.s3_path",
                    "output_s3_path.$": "$.output_s3_path"
                }
            },
            "Next": "ImportPhenopacketsMap"
        },
        "ImportPhenopacketsMap": {
            "Type": "Map",
            "ItemReader": {
                "Resource": "arn:aws:states:::s3:getObject",
                "ReaderConfig": {
                    "InputType": "JSON"
                },
                "Parameters": {
                    "Bucket.$": "$.Payload.bucket",
                    "Key.$": "$.Payload.key"
                }
            },
            "ItemProcessor": {
                "ProcessorConfig": {
                    "Mode": "DISTRIBUTED",
                    "ExecutionType": "STANDARD"
                },
                "Comment": "Process standard phenopackets to phebee input arguments.",
                "StartAt": "RenameInput",
                "States": {
                    "RenameInput": {
                        "Type": "Pass",
                        "ResultPath": "$.Data.Phenopacket",
                        "OutputPath": "$.Data",
                        "Next": "ProcessPhenopacket"
                    },
                    "ProcessPhenopacket": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${ProcessPhenopacketFunctionArn}",
                            "Payload.$": "$"
                        },
                        "ResultPath": "$.ProcessedData",
                        "Next": "CreateSubject"
                    },
                    "CreateSubject": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${CreateSubjectFunctionArn}",
                            "Payload.$": "$.ProcessedData.Payload.subject_payload"
                        },
                        "ResultPath": "$.CreateSubjectResult",
                        "Next": "ParseSubjectBody"
                    },
                    "ParseSubjectBody": {
                        "Type": "Pass",
                        "Parameters": {
                            "parsed_subject.$": "States.StringToJson($.CreateSubjectResult.Payload.body)"
                        },
                        "ResultPath": "$.ParsedSubject",
                        "Next": "PrepareSubjectTermLinksPayload"
                    },
                    "PrepareSubjectTermLinksPayload": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${PrepareSubjectTermLinksPayloadFunctionArn}",
                            "Payload": {
                                "term_links_payload.$": "$.ProcessedData.Payload.term_links_payload",
                                "source_node_iri.$": "$.ParsedSubject.parsed_subject.subject.iri"
                            }
                        },
                        "ResultPath": "$.PreparedLinks",
                        "Next": "CreateTermLinksMap"
                    },
                    "CreateTermLinksMap": {
                        "Type": "Map",
                        "ItemsPath": "$.PreparedLinks.Payload.fixed_term_links_payload",
                        "MaxConcurrency": 32,
                        "ItemProcessor": {
                            "StartAt": "CreateTermLink",
                            "States": {
                                "CreateTermLink": {
                                    "Type": "Task",
                                    "Resource": "arn:aws:states:::lambda:invoke",
                                    "Parameters": {
                                        "FunctionName": "${CreateTermLinkFunctionArn}",
                                        "Payload.$": "$"
                                    },
                                    "End": true
                                }
                            }
                        },
                        "ResultPath": "$.CreateTermLinksResult",
                        "End": true
                    }
                }
            },
            "MaxConcurrency": 32,
            "ResultSelector": {
                "subject_ids": "$[*].ProcessedData.subject_id"
            },
            "ResultPath": "$.Summary",
            "End": true
        }
    }
}